/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PContent;
include protocol PSHistory;

include DOMTypes;
include NewPSHEntry;

using refcounted class nsDocShellLoadState from "mozilla/dom/DocShellMessageUtils.h";
using struct nsID from "nsID.h";
using nsIntRect from "nsRect.h";

namespace mozilla {
namespace dom {

sync protocol PSHEntry {
  manager PContent;

parent:
  sync GetURI() returns (nsIURI uri);
  sync SetURI(nsIURI uri);
  sync GetOriginalURI() returns (nsIURI originalUri);
  sync SetOriginalURI(nsIURI originalUri);
  sync GetResultPrincipalURI() returns (nsIURI resultPrincipalUri);
  sync SetResultPrincipalURI(nsIURI resultPrincipalUri);
  sync GetLoadReplace() returns (bool loadReplace);
  sync SetLoadReplace(bool loadReplace);
  sync GetTitle() returns (nsString title);
  sync SetTitle(nsString title);
  sync GetIsSubFrame() returns (bool isSubFrame);
  sync SetIsSubFrame(bool isSubFrame);
  sync GetReferrerInfo() returns (nsIReferrerInfo referrerInfo);
  sync SetReferrerInfo(nsIReferrerInfo referrerInfo);
  sync GetSticky() returns (bool sticky);
  sync SetSticky(bool sticky);
  sync GetPostData() returns (nsIInputStream postData);
  sync SetPostData(nsIInputStream postData);
  sync GetParent() returns (MaybeNewPSHEntry parentEntry);
  sync SetParent(nullable PSHEntry parentEntry);
  sync GetLoadType() returns (uint32_t loadType);
  sync SetLoadType(uint32_t loadType);
  sync GetID() returns (uint32_t id);
  sync SetID(uint32_t id);
  sync GetCacheKey() returns (uint32_t cacheKey);
  sync SetCacheKey(uint32_t cacheKey);
  sync GetExpirationStatus() returns (bool expirationStatus);
  sync SetExpirationStatus(bool expirationStatus);
  sync GetContentType() returns (nsCString contentType);
  sync SetContentType(nsCString contentType);
  sync GetURIWasModified() returns (bool uriWasModified);
  sync SetURIWasModified(bool uriWasModified);
  sync GetTriggeringPrincipal() returns (nsIPrincipal triggeringPrincipal);
  sync SetTriggeringPrincipal(nsIPrincipal triggeringPrincipal);
  sync GetPrincipalToInherit() returns (nsIPrincipal principalToInherit);
  sync SetPrincipalToInherit(nsIPrincipal principalToInherit);
  sync GetCsp() returns (nsIContentSecurityPolicy csp);
  sync SetCsp(nsIContentSecurityPolicy csp);
  sync GetStateData() returns (ClonedMessageData stateData);
  sync SetStateData(ClonedMessageData stateData);
  sync GetDocshellID() returns (nsID docshellId);
  sync SetDocshellID(nsID docshellId);
  sync GetIsSrcdocEntry() returns (bool isSrcdocEntry);
  sync GetSrcdocData() returns (nsString srcdocData);
  sync SetSrcdocData(nsString srcdocData);
  sync GetBaseURI() returns (nsIURI baseUri);
  sync SetBaseURI(nsIURI baseUri); 
  sync GetScrollRestorationIsManual() returns (bool scrollRestorationIsManual);
  sync SetScrollRestorationIsManual(bool scrollRestorationIsManual);
  sync GetLoadedInThisProcess() returns (bool loadedInThisProcess);
  sync GetLastTouched() returns (uint32_t lastTouched);
  sync SetLastTouched(uint32_t lastTouched);
  sync GetChildCount() returns (int32_t childCount);
  sync GetPersist() returns (bool persist);
  sync SetPersist(bool persist);
  sync SetScrollPosition(int32_t x, int32_t y);
  sync GetScrollPosition() returns (int32_t x, int32_t y);
  sync GetViewerBounds() returns (nsIntRect bounds);
  sync SetViewerBounds(nsIntRect bounds);
  sync Create(nsIURI URI, nsString title, nsIInputStream inputStream,
              uint32_t cacheKey, nsCString contentType,
              nsIPrincipal triggeringPrincipal, nsIPrincipal principalToInherit,
              nsIContentSecurityPolicy csp, nsID docshellID,
              bool dynamicCreation, nsIURI originalUri, nsIURI resultPrincipalURI,
              bool loadReplace, nsIReferrerInfo referrerInfo,
              nsString srcdoc, bool srcdocEntry, nsIURI baseURI,
              bool saveLayoutState, bool expired);
  sync HasDetachedEditor() returns (bool hasDetachedEditor);
  sync IsDynamicallyAdded() returns (bool isDynamicallyAdded);
  sync HasDynamicallyAddedChild() returns (bool hasDynamicallyAddedChild);
  sync AdoptBFCacheEntry(PSHEntry entry) returns (nsresult result);
  sync AbandonBFCacheEntry(uint64_t aNewSharedID);
  sync SharesDocumentWith(PSHEntry entry) returns (bool sharesDocumentWith,
                                                   nsresult result);
  sync SetLoadTypeAsHistory();
  sync AddChild(nullable PSHEntry childEntry, int32_t offset) returns (nsresult result);
  sync RemoveChild(PSHEntry childEntry) returns (nsresult result);
  sync GetChildAt(int32_t index) returns (MaybeNewPSHEntry childEntry);
  sync ReplaceChild(PSHEntry newChildEntry) returns (nsresult result);
  sync ClearEntry(uint64_t aNewSharedID);
  sync CreateLoadInfo() returns (nsDocShellLoadState loadState);

  sync __delete__();
};

} // namespace dom
} // namespace mozilla

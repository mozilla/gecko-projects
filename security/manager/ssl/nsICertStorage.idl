/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*-
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsISupports.idl"

%{C++
#define NS_CERTSTORAGE_CONTRACTID "@mozilla.org/security/certstorage;1"
%}

/**
 * Callback type used to notify callers that an operation performed by
 * nsICertStorage has completed. Indicates the result of the requested
 * operation.
 */
[scriptable, function, uuid(3f8fe26a-a436-4ad4-9c1c-a53c60973c31)]
interface nsICertStorageCallback : nsISupports {
  [must_use]
  void done(in nsresult result);
};

[scriptable, uuid(327100a7-3401-45ef-b160-bf880f1016fd)]
interface nsICertStorage : nsISupports {
  const short STATE_UNSET = 0;
  const short STATE_ENFORCE = 1;

  /**
   * Asynchronously set the revocation state of a certificate by issuer and
   * serial number. Both issuer name and serial number are base64-encoded.
   * Pass STATE_UNSET to mark the certificate as not revoked.
   * Pass STATE_ENFORCE to mark the certificate as revoked.
   * The given callback is called with the result of the operation when it
   * completes.
   * Must only be called from the main thread.
   */
  [must_use]
  void setRevocationByIssuerAndSerial(in ACString issuer,
                                      in ACString serialNumber,
                                      in short state,
                                      in nsICertStorageCallback callback);

  /**
   * Asynchronously set the revocation state of a certificate by subject and
   * public key hash (the hash algorithm should be SHA-256). Both subject name
   * and public key hash are base64-encoded.
   * Pass STATE_UNSET to mark the certificate as not revoked.
   * Pass STATE_ENFORCE to mark the certificate as revoked.
   * The given callback is called with the result of the operation when it
   * completes.
   * Must only be called from the main thread.
   */
  [must_use]
  void setRevocationBySubjectAndPubKey(in ACString subject,
                                       in ACString pubKeyHash,
                                       in short state,
                                       in nsICertStorageCallback callback);

  /**
   * Asynchronously set the whitelist state of an intermediate certificate by
   * issuer and serial number. Both are base64-encoded.
   * state (short) is STATE_ENFORCE for whitelisted certs, STATE_UNSET otherwise.
   * The given callback is called with the result of the operation when it
   * completes.
   * Must only be called from the main thread.
   */
  [must_use]
  void setWhitelist(in ACString issuer,
                    in ACString serialNumber,
                    in short state,
                    in nsICertStorageCallback callback);

  /**
   * Asynchronously set the CRLite enrollment state of a certificate by issuer
   * and serial number. Both are base64-encoded.
   * state (short) is STATE_ENFORCE for enrolled certs, STATE_UNSET otherwise.
   * The given callback is called with the result of the operation when it
   * completes.
   * Must only be called from the main thread.
   */
  [must_use]
  void setEnrollment(in ACString issuer,
                    in ACString serialNumber,
                    in short state,
                    in nsICertStorageCallback callback);

  /**
   * Get the revocation state of a certificate. STATE_UNSET indicates the
   * certificate is not revoked. STATE_ENFORCE indicates the certificate is
   * revoked.
   * issuer - issuer name, DER, Base64 encoded
   * serial - serial number, DER, Base64 encoded
   * subject - subject name, DER, Base64 encoded
   * pubkey - public key, DER, Base64 encoded
   * Must not be called from the main thread.
   */
  [must_use]
  short getRevocationState(in ACString issuer,
                           in ACString serial,
                           in ACString subject,
                           in ACString pubkey);

  /**
   * Get the CRLite enrollment status of a certificate.
   * issuer - issuer name, DER, Base64 encoded
   * serial - serial number, DER, Base64 encoded
   * Must not be called from the main thread.
   */
  [must_use]
  short getEnrollmentState(in ACString issuer,
                           in ACString serial);

  /**
   * Get the whitelist status of an intermediate certificate.
   * issuer - issuer name, DER, Base64 encoded
   * serial - serial number, DER, Base64 encoded
   * Must not be called from the main thread.
   */
  [must_use]
  short getWhitelistState(in ACString issuer,
                          in ACString serial);

   /**
    * Check that the blocklist data is current. Specifically, that the current
    * time is no more than security.onecrl.maximum_staleness_in_seconds seconds
    * after the last blocklist update (as stored in the
    * services.blocklist.onecrl.checked pref)
    */
  [must_use]
  boolean isBlocklistFresh();

   /**
    * Check that the whitelist data is current. Specifically, that the current
    * time is no more than security.onecrl.maximum_staleness_in_seconds seconds
    * after the last whitelist update (as stored in the
    * services.blocklist.intermediates.checked pref)
    */
  [must_use]
  boolean isWhitelistFresh();

   /**
    * Check that the CRLite enrollment data is current. Specifically, that the current
    * time is no more than security.onecrl.maximum_staleness_in_seconds seconds
    * after the last crlite enrollment update (as stored in the
    * services.blocklist.crlite.checked pref)
    */
  [must_use]
  boolean isEnrollmentFresh();
};

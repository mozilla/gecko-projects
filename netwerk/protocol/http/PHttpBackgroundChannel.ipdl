/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set sw=2 ts=8 et tw=80 ft=cpp : */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PBackground;
include NeckoChannelParams;
include PURLClassifierInfo;

include "mozilla/net/NeckoMessageUtils.h";

using class nsHttpHeaderArray from "nsHttpHeaderArray.h";
using struct mozilla::net::ResourceTimingStruct from "mozilla/net/TimingStruct.h";
using nsIHttpChannel::FlashPluginState from "mozilla/net/NeckoMessageUtils.h";

namespace mozilla {
namespace net {

//-------------------------------------------------------------------
async protocol PHttpBackgroundChannel
{
  manager PBackground;

child:
  // OnStartRequest is sent over main thread IPC. The following
  // OnTransportAndData/OnStopRequest/OnProgress/OnStatus/FlushForDiversion/
  // DivertMessages needs to wait in content process until OnStartRequest
  // is processed. For synchronizing the event sequence.
  async OnStartRequestSent();

  // Combines a single OnDataAvailable and its associated OnProgress &
  // OnStatus calls into one IPDL message
  async OnTransportAndData(nsresult  channelStatus,
                           nsresult  transportStatus,
                           uint64_t  offset,
                           uint32_t  count,
                           nsCString data);

  async OnStopRequest(nsresult channelStatus,
                      ResourceTimingStruct timing,
                      TimeStamp lastActiveTabOptimization,
                      nsHttpHeaderArray responseTrailers);

  async OnProgress(int64_t progress, int64_t progressMax);

  async OnStatus(nsresult status);

  // Parent has been suspended for diversion; no more events to be enqueued.
  async FlushedForDiversion();

  // Child should resume processing the ChannelEventQueue, i.e. diverting any
  // OnDataAvailable and OnStopRequest messages in the queue back to the parent.
  async DivertMessages();

  // Tell the child that channel classifier protection was disabled for this
  // load.
  async NotifyChannelClassifierProtectionDisabled(uint32_t aAcceptedReason);

  // Tell the child that cookies are allowed for this load.
  async NotifyCookieAllowed();

  // Tell the child that tracking cookies are blocked for this load.
  async NotifyCookieBlocked(uint32_t aRejectedReason);

  // Tell the child that the resource being loaded has been classified.
  async NotifyClassificationFlags(uint32_t aClassificationFlags, bool aIsThirdParty);

  // Tell the child that the current channel's document is not allowed to load
  // flash content.
  async NotifyFlashPluginStateChanged(FlashPluginState aState);

  // Tell the child information of matched URL againts SafeBrowsing list
  async SetClassifierMatchedInfo(ClassifierInfo info);

  // Tell the child information of matched URL againts SafeBrowsing tracking list
  async SetClassifierMatchedTrackingInfo(ClassifierInfo info);

  async __delete__();

};


} // namespace net
} // namespace mozilla

/* -*- Mode: C++; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

include protocol PFileDescriptorSet;
include protocol PHttpTransaction;
include protocol PChildToParentStream;
include protocol PParentToChildStream;
include protocol PDNSRequest;
include protocol PSocketProcessBridge;
include protocol PProfiler;
include protocol PAltService;
include protocol PWebrtcTCPSocket;
include protocol PBackground;

include MemoryReportTypes;
include PBrowserOrId;
include PrefsTypes;

using mozilla::dom::NativeThreadId from "mozilla/dom/TabMessageUtils.h";
using mozilla::Telemetry::HistogramAccumulation from "mozilla/TelemetryComms.h";
using mozilla::Telemetry::KeyedHistogramAccumulation from "mozilla/TelemetryComms.h";
using mozilla::Telemetry::ScalarAction from "mozilla/TelemetryComms.h";
using mozilla::Telemetry::KeyedScalarAction from "mozilla/TelemetryComms.h";
using mozilla::Telemetry::ChildEventData from "mozilla/TelemetryComms.h";
using mozilla::Telemetry::DiscardedData from "mozilla/TelemetryComms.h";
using base::ProcessId from "base/process.h";
using mozilla::OriginAttributes from "mozilla/ipc/BackgroundUtils.h";
using mozilla::net::HttpRetParams from "mozilla/net/DashboardTypes.h";
using PRTime from "prtime.h";

namespace mozilla {
namespace net {

protocol PSocketProcess
{
  manages PFileDescriptorSet;
  manages PHttpTransaction;
  manages PChildToParentStream;
  manages PParentToChildStream;
  manages PDNSRequest;
  manages PWebrtcTCPSocket;
  manages PAltService;

parent:
  async InitCrashReporter(Shmem shmem, NativeThreadId threadId);
  async AddMemoryReport(MemoryReport aReport);
  async FinishMemoryReport(uint32_t aGeneration);
  async PChildToParentStream();

  // Messages for sending telemetry to parent process.
  async AccumulateChildHistograms(HistogramAccumulation[] accumulations);
  async AccumulateChildKeyedHistograms(KeyedHistogramAccumulation[] accumulations);
  async UpdateChildScalars(ScalarAction[] actions);
  async UpdateChildKeyedScalars(KeyedScalarAction[] actions);
  async RecordChildEvents(ChildEventData[] events);
  async RecordDiscardedData(DiscardedData data);

  async PAltService();

  /* tabId is only required for web-proxy support, which isn't always needed */
  async PWebrtcTCPSocket(TabId? tabId);
  async InitBackground(Endpoint<PBackgroundParent> aEndpoint);
  async OnPushStream(uint64_t channelId,
                     uint32_t streamId,
                     nsCString resourceUrl,
                     nsCString requestString);
  async ObserveActivity(uint64_t aChannelId,
                        uint32_t aActivityType,
                        uint32_t aActivitySubtype,
                        PRTime   aTimestamp,
                        uint64_t aExtraSizeData,
                        nsCString aExtraStringData);

child:
  async PreferenceUpdate(Pref pref);
  async RequestMemoryReport(uint32_t generation,
                            bool anonymize,
                            bool minimizeMemoryUsage,
                            FileDescriptor? DMDFile);
  async PHttpTransaction(uint64_t aChannelID);

  async PParentToChildStream();
  async SetOffline(bool offline);
  async InitSocketProcessBridgeParent(ProcessId processId, Endpoint<PSocketProcessBridgeParent> endpoint);
  async InitProfiler(Endpoint<PProfilerChild> aEndpoint);
  async NotifySocketProcessObservers(nsCString topic, nsString data);
  async TopLevelOuterWindowId(uint64_t outerWindowId);
  async GetHttpConnectionData()
    returns (HttpRetParams[] params);
  async DoShiftReloadConnectionCleanup(nsCString hashKey);
  async ClearDNSCache(bool trrToo);
  async InitiateTransaction(PHttpTransaction trans, int32_t priority);
  async InitiateTransactionWithStickyConn(PHttpTransaction trans, int32_t priority, PHttpTransaction transWithStickyConn);

  // test-only
  async SocketProcessTelemetryPing();

both:
  async PFileDescriptorSet(FileDescriptor fd);
  async PDNSRequest(nsCString hostName, OriginAttributes originAttributes,
                    uint32_t flags);

};

} // namespace net
} // namespace mozilla

changeset:   562948:7a8aa1cef9d3
parent:      562940:36dc32ab3d6e
user:        Gabriele Svelto <gsvelto@mozilla.com>
date:        Fri Jul 05 21:46:17 2019 +0200
summary:     Bug 1420363 - Platform-specific fixes; r=froydnj

diff --git a/src/common/mac/HTTPMultipartUpload.h b/src/common/mac/HTTPMultipartUpload.h
--- a/src/common/mac/HTTPMultipartUpload.h
+++ b/src/common/mac/HTTPMultipartUpload.h
@@ -32,28 +32,28 @@
 // Each file is sent with a name field in addition to the filename and data
 // The data will be sent synchronously.
 
 #import <Foundation/Foundation.h>
 
 @interface HTTPMultipartUpload : NSObject {
  @protected
   NSURL *url_;                  // The destination URL (STRONG)
-  NSDictionary *parameters_;    // The key/value pairs for sending data (STRONG)
+  NSMutableString *parameters_;  // The JSON payload for sending data (STRONG)
   NSMutableDictionary *files_;  // Dictionary of name/file-path (STRONG)
   NSString *boundary_;          // The boundary string (STRONG)
   NSHTTPURLResponse *response_; // The response from the send (STRONG)
 }
 
 - (id)initWithURL:(NSURL *)url;
 
 - (NSURL *)URL;
 
-- (void)setParameters:(NSDictionary *)parameters;
-- (NSDictionary *)parameters;
+- (void)setParameters:(NSMutableString *)parameters;
+- (NSMutableString *)parameters;
 
 - (void)addFileAtPath:(NSString *)path name:(NSString *)name;
 - (void)addFileContents:(NSData *)data name:(NSString *)name;
 - (NSDictionary *)files;
 
 // Set the data and return the response
 - (NSData *)send:(NSError **)error;
 - (NSHTTPURLResponse *)response;
diff --git a/src/common/mac/HTTPMultipartUpload.m b/src/common/mac/HTTPMultipartUpload.m
--- a/src/common/mac/HTTPMultipartUpload.m
+++ b/src/common/mac/HTTPMultipartUpload.m
@@ -88,17 +88,17 @@ static NSData *SendSynchronousNSURLReque
                                returningResponse:out_response
                                            error:out_error];
 #endif
 }
 @interface HTTPMultipartUpload(PrivateMethods)
 - (NSString *)multipartBoundary;
 // Each of the following methods will append the starting multipart boundary,
 // but not the ending one.
-- (NSData *)formDataForKey:(NSString *)key value:(NSString *)value;
+- (NSData *)formDataForJSON:(NSString *)json;
 - (NSData *)formDataForFileContents:(NSData *)contents name:(NSString *)name;
 - (NSData *)formDataForFile:(NSString *)file name:(NSString *)name;
 @end
 
 @implementation HTTPMultipartUpload
 //=============================================================================
 #pragma mark -
 #pragma mark || Private ||
@@ -105,23 +105,26 @@ static NSData *SendSynchronousNSURLReque
 //=============================================================================
 - (NSString *)multipartBoundary {
   // The boundary has 27 '-' characters followed by 16 hex digits
   return [NSString stringWithFormat:@"---------------------------%08X%08X",
     rand(), rand()];
 }
 
 //=============================================================================
-- (NSData *)formDataForKey:(NSString *)key value:(NSString *)value {
-  NSString *escaped = PercentEncodeNSString(key);
-  NSString *fmt =
-    @"--%@\r\nContent-Disposition: form-data; name=\"%@\"\r\n\r\n%@\r\n";
-  NSString *form = [NSString stringWithFormat:fmt, boundary_, escaped, value];
+- (NSData *)formDataForJSON:(NSString *)json {
+  NSMutableData *data = [NSMutableData data];
+  NSString *fmt = @"--%@\r\nContent-Disposition: form-data; name=\"extra\"; "
+                   "filename=\"extra.json\"\r\nContent-Type: application/json\r\n\r\n";
+  NSString *form = [NSString stringWithFormat:fmt, boundary_];
 
-  return [form dataUsingEncoding:NSUTF8StringEncoding];
+  [data appendData:[form dataUsingEncoding:NSUTF8StringEncoding]];
+  [data appendData:[json dataUsingEncoding:NSUTF8StringEncoding]];
+
+  return data;
 }
 
 //=============================================================================
 - (NSData *)formDataForFileContents:(NSData *)contents name:(NSString *)name {
   NSMutableData *data = [NSMutableData data];
   NSString *escaped = PercentEncodeNSString(name);
   NSString *fmt = @"--%@\r\nContent-Disposition: form-data; name=\"%@\"; "
     "filename=\"minidump.dmp\"\r\nContent-Type: application/octet-stream\r\n\r\n";
@@ -166,25 +169,25 @@ static NSData *SendSynchronousNSURLReque
 }
 
 //=============================================================================
 - (NSURL *)URL {
   return url_;
 }
 
 //=============================================================================
-- (void)setParameters:(NSDictionary *)parameters {
+- (void)setParameters:(NSMutableString *)parameters {
   if (parameters != parameters_) {
     [parameters_ release];
-    parameters_ = [parameters copy];
+    parameters_ = [parameters mutableCopy];
   }
 }
 
 //=============================================================================
-- (NSDictionary *)parameters {
+- (NSMutableString *)parameters {
   return parameters_;
 }
 
 //=============================================================================
 - (void)addFileAtPath:(NSString *)path name:(NSString *)name {
   [files_ setObject:path forKey:name];
 }
 
@@ -205,26 +208,18 @@ static NSData *SendSynchronousNSURLReque
           initWithURL:url_ cachePolicy:NSURLRequestUseProtocolCachePolicy
       timeoutInterval:10.0 ];
 
   NSMutableData *postBody = [NSMutableData data];
 
   [req setValue:[NSString stringWithFormat:@"multipart/form-data; boundary=%@",
     boundary_] forHTTPHeaderField:@"Content-type"];
 
-  // Add any parameters to the message
-  NSArray *parameterKeys = [parameters_ allKeys];
-  NSString *key;
-
-  NSInteger count = [parameterKeys count];
-  for (NSInteger i = 0; i < count; ++i) {
-    key = [parameterKeys objectAtIndex:i];
-    [postBody appendData:[self formDataForKey:key
-                                        value:[parameters_ objectForKey:key]]];
-  }
+  // Add JSON parameters to the message
+  [postBody appendData:[self formDataForJSON:parameters_]];
 
   // Add any files to the message
   NSArray *fileNames = [files_ allKeys];
   for (NSString *name in fileNames) {
     id fileOrData = [files_ objectForKey:name];
     NSData *fileData;
 
     // The object can be either the path to a file (NSString) or the contents

changeset:   562940:36dc32ab3d6e
parent:      562937:9987d601c5eb
user:        Gabriele Svelto <gsvelto@mozilla.com>
date:        Wed Jul 03 14:20:58 2019 +0200
summary:     Bug 1420363 - Windows-specific fixes; r=froydnj

diff --git a/src/common/windows/http_upload.cc b/src/common/windows/http_upload.cc
--- a/src/common/windows/http_upload.cc
+++ b/src/common/windows/http_upload.cc
@@ -58,30 +58,25 @@ class HTTPUpload::AutoInternetHandle {
   HINTERNET get() { return handle_; }
 
  private:
   HINTERNET handle_;
 };
 
 // static
 bool HTTPUpload::SendRequest(const wstring &url,
-                             const map<wstring, wstring> &parameters,
+                             const string &parameters,
                              const map<wstring, wstring> &files,
                              int *timeout,
                              wstring *response_body,
                              int *response_code) {
   if (response_code) {
     *response_code = 0;
   }
 
-  // TODO(bryner): support non-ASCII parameter names
-  if (!CheckParameters(parameters)) {
-    return false;
-  }
-
   // Break up the URL and make sure we can handle it
   wchar_t scheme[16], host[256], path[256];
   URL_COMPONENTS components;
   memset(&components, 0, sizeof(components));
   components.dwStructSize = sizeof(components);
   components.lpszScheme = scheme;
   components.dwSchemeLength = sizeof(scheme) / sizeof(scheme[0]);
   components.lpszHostName = host;
@@ -260,35 +255,40 @@ wstring HTTPUpload::GenerateMultipartBou
 // static
 wstring HTTPUpload::GenerateRequestHeader(const wstring &boundary) {
   wstring header = L"Content-Type: multipart/form-data; boundary=";
   header += boundary;
   return header;
 }
 
 // static
-bool HTTPUpload::GenerateRequestBody(const map<wstring, wstring> &parameters,
+bool HTTPUpload::GenerateRequestBody(const string &parameters,
                                      const map<wstring, wstring> &files,
                                      const wstring &boundary,
                                      string *request_body) {
   string boundary_str = WideToUTF8(boundary);
   if (boundary_str.empty()) {
     return false;
   }
 
   request_body->clear();
 
-  // Append each of the parameter pairs as a form-data part
-  for (map<wstring, wstring>::const_iterator pos = parameters.begin();
-       pos != parameters.end(); ++pos) {
-    request_body->append("--" + boundary_str + "\r\n");
-    request_body->append("Content-Disposition: form-data; name=\"" +
-                         WideToUTF8(pos->first) + "\"\r\n\r\n" +
-                         WideToUTF8(pos->second) + "\r\n");
+  // Append the extra data as a single JSON form entry
+  request_body->append("--" + boundary_str + "\r\n");
+  request_body->append(
+      "Content-Disposition: form-data; "
+      "name=\"extra\"; "
+      "filename=\"extra.json\"\r\n");
+  request_body->append("Content-Type: application/json\r\n");
+  request_body->append("\r\n");
+
+  if (!parameters.empty()) {
+    request_body->append(parameters);
   }
+  request_body->append("\r\n");
 
   for (map<wstring, wstring>::const_iterator pos = files.begin();
        pos != files.end(); ++pos) {
     vector<char> contents;
     if (!GetFileContents(pos->second, &contents)) {
       return false;
     }
 
@@ -394,27 +394,9 @@ string HTTPUpload::WideToMBCP(const wstr
   WideCharToMultiByte(cp, 0, wide.c_str(), -1, buf, charcount,
                       NULL, NULL);
 
   string result(buf);
   delete[] buf;
   return result;
 }
 
-// static
-bool HTTPUpload::CheckParameters(const map<wstring, wstring> &parameters) {
-  for (map<wstring, wstring>::const_iterator pos = parameters.begin();
-       pos != parameters.end(); ++pos) {
-    const wstring &str = pos->first;
-    if (str.size() == 0) {
-      return false;  // disallow empty parameter names
-    }
-    for (unsigned int i = 0; i < str.size(); ++i) {
-      wchar_t c = str[i];
-      if (c < 32 || c == '"' || c > 127) {
-        return false;
-      }
-    }
-  }
-  return true;
-}
-
 }  // namespace google_breakpad
diff --git a/src/common/windows/http_upload.h b/src/common/windows/http_upload.h
--- a/src/common/windows/http_upload.h
+++ b/src/common/windows/http_upload.h
@@ -24,17 +24,17 @@
 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 // HTTPUpload provides a "nice" API to send a multipart HTTP(S) POST
 // request using wininet.  It currently supports requests that contain
-// a set of string parameters (key/value pairs), and a file to upload.
+// parameters encoded in a JSON string, and a file to upload.
 
 #ifndef COMMON_WINDOWS_HTTP_UPLOAD_H_
 #define COMMON_WINDOWS_HTTP_UPLOAD_H_
 
 #pragma warning(push)
 // Disable exception handler warnings.
 #pragma warning(disable : 4530)
 
@@ -42,36 +42,35 @@
 #include <wininet.h>
 
 #include <map>
 #include <string>
 #include <vector>
 
 namespace google_breakpad {
 
+using std::map;
 using std::string;
+using std::vector;
 using std::wstring;
-using std::map;
-using std::vector;
 
 class HTTPUpload {
  public:
   // Sends the given sets of parameters and files as a multipart POST
   // request to the given URL.
   // Each key in |files| is the name of the file part of the request
   // (i.e. it corresponds to the name= attribute on an <input type="file">.
-  // Parameter names must contain only printable ASCII characters,
-  // and may not contain a quote (") character.
+  // Parameters are specified as a JSON-encoded string in |parameters|.
   // Only HTTP(S) URLs are currently supported.  Returns true on success.
   // If the request is successful and response_body is non-NULL,
   // the response body will be returned in response_body.
   // If response_code is non-NULL, it will be set to the HTTP response code
   // received (or 0 if the request failed before getting an HTTP response).
   static bool SendRequest(const wstring &url,
-                          const map<wstring, wstring> &parameters,
+                          const string &parameters,
                           const map<wstring, wstring> &files,
                           int *timeout,
                           wstring *response_body,
                           int *response_code);
 
  private:
   class AutoInternetHandle;
 
@@ -82,20 +81,20 @@ class HTTPUpload {
   static bool ReadResponse(HINTERNET request, wstring* response);
 
   // Generates a new multipart boundary for a POST request
   static wstring GenerateMultipartBoundary();
 
   // Generates a HTTP request header for a multipart form submit.
   static wstring GenerateRequestHeader(const wstring &boundary);
 
-  // Given a set of parameters, a set of upload files, and a file part name,
+  // Given a parameter string, a set of upload files, and a file part name,
   // generates a multipart request body string with these parameters
   // and minidump contents.  Returns true on success.
-  static bool GenerateRequestBody(const map<wstring, wstring> &parameters,
+  static bool GenerateRequestBody(const string &parameters,
                                   const map<wstring, wstring> &files,
                                   const wstring &boundary,
                                   string *request_body);
 
   // Fills the supplied vector with the contents of filename.
   static bool GetFileContents(const wstring &filename, vector<char> *contents);
 
   // Converts a UTF8 string to UTF16.
@@ -104,21 +103,16 @@ class HTTPUpload {
   // Converts a UTF16 string to UTF8.
   static string WideToUTF8(const wstring &wide) {
       return WideToMBCP(wide, CP_UTF8);
   }
 
   // Converts a UTF16 string to specified code page.
   static string WideToMBCP(const wstring &wide, unsigned int cp);
 
-  // Checks that the given list of parameters has only printable
-  // ASCII characters in the parameter name, and does not contain
-  // any quote (") characters.  Returns true if so.
-  static bool CheckParameters(const map<wstring, wstring> &parameters);
-
   // No instances of this class should be created.
   // Disallow all constructors, destructors, and operator=.
   HTTPUpload();
   explicit HTTPUpload(const HTTPUpload &);
   void operator=(const HTTPUpload &);
   ~HTTPUpload();
 };
 

changeset:   562937:9987d601c5eb
parent:      562924:57f50ca45b4a
user:        Gabriele Svelto <gsvelto@mozilla.com>
date:        Thu Aug 01 15:19:52 2019 +0200
summary:     Bug 1420363 - Linux-specific bits; r=froydnj

diff --git a/src/common/linux/http_upload.cc b/src/common/linux/http_upload.cc
--- a/src/common/linux/http_upload.cc
+++ b/src/common/linux/http_upload.cc
@@ -50,30 +50,27 @@ static size_t WriteCallback(void *ptr, s
 }  // namespace
 
 namespace google_breakpad {
 
 static const char kUserAgent[] = "Breakpad/1.0 (Linux)";
 
 // static
 bool HTTPUpload::SendRequest(const string &url,
-                             const map<string, string> &parameters,
+                             const string &parameters,
                              const map<string, string> &files,
                              const string &proxy,
                              const string &proxy_user_pwd,
                              const string &ca_certificate_file,
                              string *response_body,
                              long *response_code,
                              string *error_description) {
   if (response_code != NULL)
     *response_code = 0;
 
-  if (!CheckParameters(parameters))
-    return false;
-
   // We may have been linked statically; if curl_easy_init is in the
   // current binary, no need to search for a dynamic version.
   void* curl_lib = dlopen(NULL, RTLD_NOW);
   if (!CheckCurlLib(curl_lib)) {
     fprintf(stderr,
             "Failed to open curl lib from binary, use libcurl.so instead\n");
     dlerror();  // Clear dlerror before attempting to open libraries.
     dlclose(curl_lib);
@@ -128,24 +125,24 @@ bool HTTPUpload::SendRequest(const strin
   if (!ca_certificate_file.empty())
     (*curl_easy_setopt)(curl, CURLOPT_CAINFO, ca_certificate_file.c_str());
 
   struct curl_httppost *formpost = NULL;
   struct curl_httppost *lastptr = NULL;
   // Add form data.
   CURLFORMcode (*curl_formadd)(struct curl_httppost **, struct curl_httppost **, ...);
   *(void**) (&curl_formadd) = dlsym(curl_lib, "curl_formadd");
-  map<string, string>::const_iterator iter = parameters.begin();
-  for (; iter != parameters.end(); ++iter)
-    (*curl_formadd)(&formpost, &lastptr,
-                 CURLFORM_COPYNAME, iter->first.c_str(),
-                 CURLFORM_COPYCONTENTS, iter->second.c_str(),
-                 CURLFORM_END);
+  (*curl_formadd)(&formpost, &lastptr, CURLFORM_COPYNAME, "extra",
+                  CURLFORM_BUFFER, "extra.json", CURLFORM_BUFFERPTR,
+                  parameters.c_str(), CURLFORM_BUFFERLENGTH,
+                  parameters.length(), CURLFORM_CONTENTTYPE, "application/json",
+                  CURLFORM_END);
 
   // Add form files.
+  map<string, string>::const_iterator iter = files.begin();
   for (iter = files.begin(); iter != files.end(); ++iter) {
     (*curl_formadd)(&formpost, &lastptr,
                  CURLFORM_COPYNAME, iter->first.c_str(),
                  CURLFORM_FILE, iter->second.c_str(),
                  CURLFORM_END);
   }
 
   (*curl_easy_setopt)(curl, CURLOPT_HTTPPOST, formpost);
@@ -205,26 +202,9 @@ bool HTTPUpload::SendRequest(const strin
 
 // static
 bool HTTPUpload::CheckCurlLib(void* curl_lib) {
   return curl_lib &&
       dlsym(curl_lib, "curl_easy_init") &&
       dlsym(curl_lib, "curl_easy_setopt");
 }
 
-// static
-bool HTTPUpload::CheckParameters(const map<string, string> &parameters) {
-  for (map<string, string>::const_iterator pos = parameters.begin();
-       pos != parameters.end(); ++pos) {
-    const string &str = pos->first;
-    if (str.size() == 0)
-      return false;  // disallow empty parameter names
-    for (unsigned int i = 0; i < str.size(); ++i) {
-      int c = str[i];
-      if (c < 32 || c == '"' || c > 127) {
-        return false;
-      }
-    }
-  }
-  return true;
-}
-
 }  // namespace google_breakpad
diff --git a/src/common/linux/http_upload.h b/src/common/linux/http_upload.h
--- a/src/common/linux/http_upload.h
+++ b/src/common/linux/http_upload.h
@@ -24,17 +24,17 @@
 // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
 // HTTPUpload provides a "nice" API to send a multipart HTTP(S) POST
 // request using libcurl.  It currently supports requests that contain
-// a set of string parameters (key/value pairs), and a file to upload.
+// parameters encoded in a JSON string, and a file to upload.
 
 #ifndef COMMON_LINUX_HTTP_UPLOAD_H__
 #define COMMON_LINUX_HTTP_UPLOAD_H__
 
 #include <map>
 #include <string>
 
 #include "common/using_std_string.h"
@@ -44,41 +44,35 @@ namespace google_breakpad {
 using std::map;
 
 class HTTPUpload {
  public:
   // Sends the given sets of parameters and files as a multipart POST
   // request to the given URL.
   // Each key in |files| is the name of the file part of the request
   // (i.e. it corresponds to the name= attribute on an <input type="file">.
-  // Parameter names must contain only printable ASCII characters,
-  // and may not contain a quote (") character.
+  // Parameters are specified as a JSON-encoded string in |parameters|.
   // Only HTTP(S) URLs are currently supported.  Returns true on success.
   // If the request is successful and response_body is non-NULL,
   // the response body will be returned in response_body.
   // If response_code is non-NULL, it will be set to the HTTP response code
   // received (or 0 if the request failed before getting an HTTP response).
   // If the send fails, a description of the error will be
   // returned in error_description.
   static bool SendRequest(const string &url,
-                          const map<string, string> &parameters,
+                          const string &parameters,
                           const map<string, string> &files,
                           const string &proxy,
                           const string &proxy_user_pwd,
                           const string &ca_certificate_file,
                           string *response_body,
                           long *response_code,
                           string *error_description);
 
  private:
-  // Checks that the given list of parameters has only printable
-  // ASCII characters in the parameter name, and does not contain
-  // any quote (") characters.  Returns true if so.
-  static bool CheckParameters(const map<string, string> &parameters);
-
   // Checks the curl_lib parameter points to a valid curl lib.
   static bool CheckCurlLib(void* curl_lib);
 
   // No instances of this class should be created.
   // Disallow all constructors, destructors, and operator=.
   HTTPUpload();
   explicit HTTPUpload(const HTTPUpload &);
   void operator=(const HTTPUpload &);


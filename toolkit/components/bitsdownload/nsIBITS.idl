/* -*- Mode: IDL; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#include "nsIRequest.idl"

interface nsIRequest;
interface nsIRequestObserver;

interface nsIBITSCancelDownloadCallback;
interface nsIBITSCompleteDownloadCallback;
interface nsIBITSChangeMonitorIntervalCallback;
interface nsIBITSInitCallback;
interface nsIBITSMonitorDownloadCallback;
interface nsIBITSResumeDownloadCallback;
interface nsIBITSSetPriorityHighCallback;
interface nsIBITSSetPriorityLowCallback;
interface nsIBITSStartDownloadCallback;
interface nsIBITSSuspendDownloadCallback;

typedef long nsProxyUsage;

/**
 * An interface for interacting with Windows Background Intelligent Transfer
 * Service. This should only be used on Windows.
 *
 * This interface currently only supports downloading one file at a time.
 *
 * It would be preferable for the functions in this interface to return
 * Promises, but this interface is implemented in Rust, which does not yet have
 * support for Promises. There is a JS wrapper around this class that should be
 * preferred over using this interface directly, located in BITS.jsm.
 *
 * Note: Although the nsIBITS interface derives from nsIRequest, implementations
 *       may not implement the loadGroup or loadFlags attributes properly.
 *
 * Note: Until startDownload or monitorDownload is called, nsIRequest methods
 *       may return NS_ERROR_NOT_INITIALIZED.
 */
[scriptable, uuid(495d6f3d-9748-4d30-8ce5-0290c0001edf)]
interface nsIBITS : nsIRequest
{
  /**
   * Initializes the BITS interface.
   * init() should be called again if cancelDownload() or completeDownload() is
   * called.
   *
   * @param jobName The name of the BITS job. This is used both to set the name
   *                during job creation and to verify that a job is ours.
   * @param savePathPrefix The directory that downloads will be saved to.
   *                       Providing a safe directory here ensures that the
   *                       download path cannot be manipulated to save
   *                       files to a malicious location. Downloads are
   *                       guaranteed to be saved to this directory or a
   *                       subdirectory.
   *                       This should end with a trailing slash, as the
   *                       saveRelativePath will be directly appended.
   * @param monitorTimeoutMs The amount of time to wait between download monitor
   *                         notifications. This should be larger than the
   *                         largest monitorIntervalMs that will be passed to
   *                         startDownload(), monitorDownload(), or
   *                         changeMonitorInterval(). This value may not be 0.
   * @param callback The callback used to relay the success or failure of
   *                 initialization.
   */
  void init(in AUTF8String jobName,
            in AUTF8String savePathPrefix,
            in unsigned long monitorTimeoutMs,
            in nsIBITSInitCallback callback);

  /**
   * Downloads the specified URL to the specified location within the
   * savePathPrefix passed to init().
   *
   * @param downloadURL The URL to be downloaded. Must be from a mozilla.org
   *                    domain or this function will fail.
   * @param saveRelativePath The location to download to. The path given should
   *                         be a path relative to the savePathPrefix passed to
   *                         init().
   * @param proxy Specifies what proxy to use when downloading. Valid values are
   *              listed below.
   * @param monitorIntervalMs The number of milliseconds between download status
   *                          notifications.
   * @param observer An observer to be notified of various events.
   *                 OnStartRequest is called once the BITS job has been
   *                 created. OnStopRequest is called when the file transfer
   *                 has completed or when an error occurs. If this object
   *                 implements nsIProgressEventSink, then its OnProgress method
   *                 will be called as data is transferred.
   *                 IMPORTANT NOTE: When OnStopRequest is called, the download
   *                 has completed, but completeDownload() still needs to be
   *                 called to save the file to the filesystem.
   * @param context User defined object forwarded to observer's methods
   * @param callback The callback used to relay the response from BITS.
   */
  void startDownload(in AUTF8String downloadURL,
                     in AUTF8String saveRelativePath,
                     in nsProxyUsage proxy,
                     in unsigned long monitorIntervalMs,
                     in nsIRequestObserver observer,
                     in nsISupports context,
                     in nsIBITSStartDownloadCallback callback);

  // nsProxyUsage values
  const long PROXY_NONE = 1;
  const long PROXY_PRECONFIG = 2;
  const long PROXY_AUTODETECT = 3;

  /**
   * Requests notifications on how much download progress BITS has made.
   *
   * @param id The GUID of the download to monitor.
   * @param monitorIntervalMs The number of milliseconds between download status
   *                          notifications.
   * @param observer An observer to be notified of various events.
   *                 OnStartRequest is called once the BITS job has been
   *                 created. OnStopRequest is called when the file transfer
   *                 has completed or when an error occurs. If this object
   *                 implements nsIProgressEventSink, then its OnProgress method
   *                 will be called as data is transferred.
   *                 IMPORTANT NOTE: When OnStopRequest is called, the download
   *                 has completed, but completeDownload() still needs to be
   *                 called to save the file to the filesystem.
   * @param context User defined object forwarded to observer's methods
   * @param callback The callback used to relay the response from BITS.
   */
  void monitorDownload(in AUTF8String id,
                       in unsigned long monitorIntervalMs,
                       in nsIRequestObserver observer,
                       in nsISupports context,
                       in nsIBITSMonitorDownloadCallback callback);

  /**
   * Requests a change to the frequency that Firefox is receiving download
   * status notifications.
   *
   * @param id The GUID of the download.
   * @param monitorIntervalMs The new number of milliseconds between download
   *                          status notifications.
   * @param callback The callback used to relay success or failure.
   */
  void changeMonitorInterval(in AUTF8String id,
                             in unsigned long monitorIntervalMs,
                             in nsIBITSChangeMonitorIntervalCallback callback);

  /**
   * Cancels the download specified by the GUID given. This must be the id for
   * the download started by Firefox.
   *
   * @param id The GUID of the download to cancel.
   * @param callback The callback used to relay the response from BITS.
   */
  void cancelDownload(in AUTF8String id,
                      in nsIBITSCancelDownloadCallback callback);

  /**
   * Sets the priority of the BITS job to high (i.e. foreground download).
   *
   * @param id The GUID of the download to monitor.
   * @param callback The callback function used to relay success or failure.
   */
  void setPriorityHigh(in AUTF8String id,
                       in nsIBITSSetPriorityHighCallback callback);

  /**
   * Sets the priority of the BITS job to low (i.e. background download).
   *
   * @param id The GUID of the download to monitor.
   * @param callback The callback function used to relay success or failure.
   */
  void setPriorityLow(in AUTF8String id,
                      in nsIBITSSetPriorityLowCallback callback);

  /*
   * Completes the download, moving it out of the BITS system and onto the
   * disk location specified when startDownload was called.
   *
   * @param id The GUID of the download to complete.
   * @param callback The callback function used to relay success or failure.
   */
  void completeDownload(in AUTF8String id,
                        in nsIBITSCompleteDownloadCallback callback);

  /*
   * Suspends the download, preventing more data from being transferred until
   * the download is resumed.
   *
   * @param id The GUID of the download to suspend.
   * @param callback The callback function used to relay success or failure.
   */
  void suspendDownload(in AUTF8String id,
                       in nsIBITSSuspendDownloadCallback callback);

  /*
   * Resumes a previously suspended download.
   *
   * @param id The GUID of the download to resume.
   * @param callback The callback function used to relay success or failure.
   */
  void resumeDownload(in AUTF8String id,
                      in nsIBITSResumeDownloadCallback callback);
};

/**
 * The following callback interfaces are all for use by the nsIBITS interface
 * for returning results asynchronously to the caller.
 */
[scriptable, uuid(59b7d6e4-298b-4092-90e5-9cad66e6f3ff)]
interface nsIBITSInitCallback : nsISupports
{
  void done();
};
[scriptable, uuid(aa12e433-5b9f-452d-b5c9-840a9541328b)]
interface nsIBITSStartDownloadCallback : nsISupports
{
  void success(in AUTF8String id);
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(9311aa80-e7d7-46bc-b666-da7056b1aa2d)]
interface nsIBITSMonitorDownloadCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(ea657e66-6bad-4e41-84d9-c6d107e9799d)]
interface nsIBITSChangeMonitorIntervalCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(796e8112-4d43-4c83-92e6-df04dfe81bfb)]
interface nsIBITSCancelDownloadCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(3bebad27-f6bf-41cf-b386-659ffe831099)]
interface nsIBITSSetPriorityHighCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(0be66ef0-4cbc-4a2b-8a17-34448b6b67a1)]
interface nsIBITSSetPriorityLowCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(928f022b-5a4a-4c0b-873c-273098fdae8c)]
interface nsIBITSCompleteDownloadCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(8cca3bd7-6076-4e1d-80d0-6706391ed84a)]
interface nsIBITSSuspendDownloadCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};
[scriptable, uuid(2e64ea92-91fc-4390-b09c-86138f1db62a)]
interface nsIBITSResumeDownloadCallback : nsISupports
{
  void success();
  void BITSFailure(in AUTF8String error);
  void failure(in AUTF8String error);
};

%{C++
#define NS_BITS_CID \
  { 0xa334de05, 0xb9de, 0x46a1, \
    { 0x98, 0xa9, 0x3f, 0x5c, 0xed, 0x82, 0x1e, 0x68 } }
#define NS_BITS_CONTRACTID "@mozilla.org/bits;1"
%}

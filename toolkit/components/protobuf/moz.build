# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
# vim: set filetype=python:
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

with Files('**'):
    BUG_COMPONENT = ('Core', 'General')

EXPORTS.google.protobuf += [
    'src/google/protobuf/any.h',
    'src/google/protobuf/any.pb.h',
    'src/google/protobuf/api.pb.h',
    'src/google/protobuf/arena.h',
    'src/google/protobuf/arena_impl.h',
    'src/google/protobuf/arenastring.h',
    'src/google/protobuf/descriptor.h',
    'src/google/protobuf/descriptor.pb.h',
    'src/google/protobuf/descriptor_database.h',
    'src/google/protobuf/duration.pb.h',
    'src/google/protobuf/dynamic_message.h',
    'src/google/protobuf/empty.pb.h',
    'src/google/protobuf/extension_set.h',
    'src/google/protobuf/field_mask.pb.h',
    'src/google/protobuf/generated_enum_reflection.h',
    'src/google/protobuf/generated_enum_util.h',
    'src/google/protobuf/generated_message_reflection.h',
    'src/google/protobuf/generated_message_table_driven.h',
    'src/google/protobuf/generated_message_table_driven_lite.h',
    'src/google/protobuf/generated_message_util.h',
    'src/google/protobuf/has_bits.h',
    'src/google/protobuf/map.h',
    'src/google/protobuf/map_entry.h',
    'src/google/protobuf/map_entry_lite.h',
    'src/google/protobuf/map_field.h',
    'src/google/protobuf/map_field_inl.h',
    'src/google/protobuf/map_field_lite.h',
    'src/google/protobuf/map_type_handler.h',
    'src/google/protobuf/message.h',
    'src/google/protobuf/message_lite.h',
    'src/google/protobuf/metadata.h',
    'src/google/protobuf/metadata_lite.h',
    'src/google/protobuf/package_info.h',
    'src/google/protobuf/reflection.h',
    'src/google/protobuf/reflection_internal.h',
    'src/google/protobuf/reflection_ops.h',
    'src/google/protobuf/repeated_field.h',
    'src/google/protobuf/service.h',
    'src/google/protobuf/source_context.pb.h',
    'src/google/protobuf/struct.pb.h',
    'src/google/protobuf/text_format.h',
    'src/google/protobuf/timestamp.pb.h',
    'src/google/protobuf/type.pb.h',
    'src/google/protobuf/unknown_field_set.h',
    'src/google/protobuf/wire_format.h',
    'src/google/protobuf/wire_format_lite.h',
    'src/google/protobuf/wire_format_lite_inl.h',
    'src/google/protobuf/wrappers.pb.h',
]

EXPORTS.google.protobuf.io += [
    'src/google/protobuf/io/coded_stream.h',
    'src/google/protobuf/io/coded_stream_inl.h',
    'src/google/protobuf/io/gzip_stream.h',
    'src/google/protobuf/io/package_info.h',
    'src/google/protobuf/io/printer.h',
    'src/google/protobuf/io/strtod.h',
    'src/google/protobuf/io/tokenizer.h',
    'src/google/protobuf/io/zero_copy_stream.h',
    'src/google/protobuf/io/zero_copy_stream_impl.h',
    'src/google/protobuf/io/zero_copy_stream_impl_lite.h',
]

EXPORTS.google.protobuf.stubs += [
    'src/google/protobuf/stubs/atomic_sequence_num.h',
    'src/google/protobuf/stubs/atomicops.h',
    'src/google/protobuf/stubs/atomicops_internals_arm64_gcc.h',
    'src/google/protobuf/stubs/atomicops_internals_arm_gcc.h',
    'src/google/protobuf/stubs/atomicops_internals_arm_qnx.h',
    'src/google/protobuf/stubs/atomicops_internals_atomicword_compat.h',
    'src/google/protobuf/stubs/atomicops_internals_generic_c11_atomic.h',
    'src/google/protobuf/stubs/atomicops_internals_generic_gcc.h',
    'src/google/protobuf/stubs/atomicops_internals_mips_gcc.h',
    'src/google/protobuf/stubs/atomicops_internals_power.h',
    'src/google/protobuf/stubs/atomicops_internals_ppc_gcc.h',
    'src/google/protobuf/stubs/atomicops_internals_solaris.h',
    'src/google/protobuf/stubs/atomicops_internals_tsan.h',
    'src/google/protobuf/stubs/atomicops_internals_x86_gcc.h',
    'src/google/protobuf/stubs/atomicops_internals_x86_msvc.h',
    'src/google/protobuf/stubs/bytestream.h',
    'src/google/protobuf/stubs/callback.h',
    'src/google/protobuf/stubs/casts.h',
    'src/google/protobuf/stubs/common.h',
    'src/google/protobuf/stubs/fastmem.h',
    'src/google/protobuf/stubs/hash.h',
    'src/google/protobuf/stubs/int128.h',
    'src/google/protobuf/stubs/io_win32.h',
    'src/google/protobuf/stubs/logging.h',
    'src/google/protobuf/stubs/macros.h',
    'src/google/protobuf/stubs/map_util.h',
    'src/google/protobuf/stubs/mathlimits.h',
    'src/google/protobuf/stubs/mathutil.h',
    'src/google/protobuf/stubs/mutex.h',
    'src/google/protobuf/stubs/once.h',
    'src/google/protobuf/stubs/platform_macros.h',
    'src/google/protobuf/stubs/port.h',
    'src/google/protobuf/stubs/scoped_ptr.h',
    'src/google/protobuf/stubs/shared_ptr.h',
    'src/google/protobuf/stubs/singleton.h',
    'src/google/protobuf/stubs/status.h',
    'src/google/protobuf/stubs/status_macros.h',
    'src/google/protobuf/stubs/statusor.h',
    'src/google/protobuf/stubs/stl_util.h',
    'src/google/protobuf/stubs/stringpiece.h',
    'src/google/protobuf/stubs/stringprintf.h',
    'src/google/protobuf/stubs/strutil.h',
    'src/google/protobuf/stubs/substitute.h',
    'src/google/protobuf/stubs/template_util.h',
    'src/google/protobuf/stubs/time.h',
    'src/google/protobuf/stubs/type_traits.h',
]

EXPORTS.google.protobuf.util += [
    'src/google/protobuf/util/delimited_message_util.h',
    'src/google/protobuf/util/field_comparator.h',
    'src/google/protobuf/util/field_mask_util.h',
    'src/google/protobuf/util/json_util.h',
    'src/google/protobuf/util/message_differencer.h',
    'src/google/protobuf/util/package_info.h',
    'src/google/protobuf/util/time_util.h',
    'src/google/protobuf/util/type_resolver.h',
    'src/google/protobuf/util/type_resolver_util.h',
]

EXPORTS.google.protobuf.util.internal += [
    'src/google/protobuf/util/internal/constants.h',
    'src/google/protobuf/util/internal/datapiece.h',
    'src/google/protobuf/util/internal/default_value_objectwriter.h',
    'src/google/protobuf/util/internal/error_listener.h',
    'src/google/protobuf/util/internal/expecting_objectwriter.h',
    'src/google/protobuf/util/internal/field_mask_utility.h',
    'src/google/protobuf/util/internal/json_escaping.h',
    'src/google/protobuf/util/internal/json_objectwriter.h',
    'src/google/protobuf/util/internal/json_stream_parser.h',
    'src/google/protobuf/util/internal/location_tracker.h',
    'src/google/protobuf/util/internal/mock_error_listener.h',
    'src/google/protobuf/util/internal/object_location_tracker.h',
    'src/google/protobuf/util/internal/object_source.h',
    'src/google/protobuf/util/internal/object_writer.h',
    'src/google/protobuf/util/internal/proto_writer.h',
    'src/google/protobuf/util/internal/protostream_objectsource.h',
    'src/google/protobuf/util/internal/protostream_objectwriter.h',
    'src/google/protobuf/util/internal/structured_objectwriter.h',
    'src/google/protobuf/util/internal/type_info.h',
    'src/google/protobuf/util/internal/utility.h',
]

UNIFIED_SOURCES += [
    'src/google/protobuf/any.cc',
    'src/google/protobuf/any.pb.cc',
    'src/google/protobuf/api.pb.cc',
    'src/google/protobuf/arena.cc',
    'src/google/protobuf/arenastring.cc',
    'src/google/protobuf/descriptor.cc',
    'src/google/protobuf/descriptor.pb.cc',
    'src/google/protobuf/descriptor_database.cc',
    'src/google/protobuf/duration.pb.cc',
    'src/google/protobuf/dynamic_message.cc',
    'src/google/protobuf/empty.pb.cc',
    'src/google/protobuf/extension_set.cc',
    'src/google/protobuf/field_mask.pb.cc',
    'src/google/protobuf/generated_message_reflection.cc',
    'src/google/protobuf/generated_message_util.cc',
    'src/google/protobuf/io/coded_stream.cc',
    'src/google/protobuf/io/gzip_stream.cc',
    'src/google/protobuf/io/printer.cc',
    'src/google/protobuf/io/strtod.cc',
    'src/google/protobuf/io/tokenizer.cc',
    'src/google/protobuf/io/zero_copy_stream.cc',
    'src/google/protobuf/io/zero_copy_stream_impl.cc',
    'src/google/protobuf/io/zero_copy_stream_impl_lite.cc',
    'src/google/protobuf/map_field.cc',
    'src/google/protobuf/message.cc',
    'src/google/protobuf/message_lite.cc',
    'src/google/protobuf/reflection_ops.cc',
    'src/google/protobuf/repeated_field.cc',
    'src/google/protobuf/service.cc',
    'src/google/protobuf/source_context.pb.cc',
    'src/google/protobuf/struct.pb.cc',
    'src/google/protobuf/stubs/atomicops_internals_x86_gcc.cc',
    'src/google/protobuf/stubs/atomicops_internals_x86_msvc.cc',
    'src/google/protobuf/stubs/bytestream.cc',
    'src/google/protobuf/stubs/common.cc',
    'src/google/protobuf/stubs/int128.cc',
    'src/google/protobuf/stubs/io_win32.cc',
    'src/google/protobuf/stubs/mathlimits.cc',
    'src/google/protobuf/stubs/once.cc',
    'src/google/protobuf/stubs/status.cc',
    'src/google/protobuf/stubs/statusor.cc',
    'src/google/protobuf/stubs/stringpiece.cc',
    'src/google/protobuf/stubs/stringprintf.cc',
    'src/google/protobuf/stubs/structurally_valid.cc',
    'src/google/protobuf/stubs/strutil.cc',
    'src/google/protobuf/stubs/substitute.cc',
    'src/google/protobuf/text_format.cc',
    'src/google/protobuf/timestamp.pb.cc',
    'src/google/protobuf/type.pb.cc',
    'src/google/protobuf/unknown_field_set.cc',
    'src/google/protobuf/util/delimited_message_util.cc',
    'src/google/protobuf/util/field_comparator.cc',
    'src/google/protobuf/util/field_mask_util.cc',
    'src/google/protobuf/util/internal/datapiece.cc',
    'src/google/protobuf/util/internal/default_value_objectwriter.cc',
    'src/google/protobuf/util/internal/error_listener.cc',
    'src/google/protobuf/util/internal/field_mask_utility.cc',
    'src/google/protobuf/util/internal/object_writer.cc',
    'src/google/protobuf/util/internal/type_info.cc',
    'src/google/protobuf/util/internal/utility.cc',
    'src/google/protobuf/util/json_util.cc',
    'src/google/protobuf/util/type_resolver_util.cc',
    'src/google/protobuf/wire_format_lite.cc',
    'src/google/protobuf/wrappers.pb.cc',
]

SOURCES += [
    'src/google/protobuf/extension_set_heavy.cc',
    'src/google/protobuf/generated_message_table_driven.cc',
    'src/google/protobuf/generated_message_table_driven_lite.cc',
    'src/google/protobuf/stubs/time.cc',  # GetCurrentTime conflict in winbase.h
    'src/google/protobuf/util/internal/json_escaping.cc',  # namespace problem in json_escaping.h
    'src/google/protobuf/util/internal/json_objectwriter.cc',  # namespace problem in json_escaping.h
    'src/google/protobuf/util/internal/json_stream_parser.cc',
    'src/google/protobuf/util/internal/proto_writer.cc',  # GetCurrentTime conflict in winbase.h
    'src/google/protobuf/util/internal/protostream_objectsource.cc',  # GetCurrentTime conflict in winbase.h
    'src/google/protobuf/util/internal/protostream_objectwriter.cc',  # GetCurrentTime conflict in winbase.h
    'src/google/protobuf/util/message_differencer.cc',
    'src/google/protobuf/util/time_util.cc',  # GetCurrentTime conflict in winbase.h
    'src/google/protobuf/wire_format.cc',  # GetMessage conflict in windows.h
]

# We allow warnings for third-party code that can be updated from upstream.
AllowCompilerWarnings()

FINAL_LIBRARY = 'xul'

DEFINES['GOOGLE_PROTOBUF_NO_RTTI'] = True
DEFINES['GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER'] = True

# Suppress warnings in third-party code.
if CONFIG['GNU_CXX']:
    CXXFLAGS += [
        '-Wno-ignored-qualifiers',
        '-Wno-maybe-uninitialized',
        '-Wno-return-type',
        '-Wno-sign-compare',
        '-Wno-subobject-linkage',
        '-Wno-unused-function',
    ]
    if CONFIG['CLANG_CXX']:
        CXXFLAGS += [
            '-Wno-comma',
            '-Wno-null-conversion',
            '-Wno-unused-local-typedef',
        ]
elif CONFIG['_MSC_VER']:
    CXXFLAGS += [
        '-wd4005',  # 'WIN32_LEAN_AND_MEAN' : macro redefinition
        '-wd4018',  # '<' : signed/unsigned mismatch
        '-wd4065',  # switch statement contains 'default' but no 'case' labels
        '-wd4099',  # mismatched class/struct tags
        '-wd4305',  # double to float truncation
        '-wd4506',  # no definition for inline function (protobuf issue #240)
    ]

if CONFIG['OS_TARGET'] == 'WINNT':
    DEFINES['NOGDI'] = True  # wingdi.h defines ERROR as 0 and conflicts with logging.h

if CONFIG['MOZ_USE_PTHREADS']:
    DEFINES['HAVE_PTHREAD'] = True

# Needed for the gzip streams.
DEFINES['HAVE_ZLIB'] = True

CXXFLAGS += CONFIG['TK_CFLAGS']

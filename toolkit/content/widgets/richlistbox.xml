<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<!-- This file relies on these specific Chrome/XBL globals -->
<!-- globals ChromeNodeList -->

<bindings id="richlistboxBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="richlistitem"
           extends="chrome://global/content/bindings/general.xml#basetext">
    <implementation implements="nsIDOMXULSelectControlItemElement">
      <field name="selectedByMouseOver">false</field>

      <destructor>
        <![CDATA[
          var control = this.control;
          if (!control)
            return;
          // When we are destructed and we are current or selected, unselect ourselves
          // so that richlistbox's selection doesn't point to something not in the DOM.
          // We don't want to reset last-selected, so we set _suppressOnSelect.
          if (this.selected) {
            var suppressSelect = control._suppressOnSelect;
            control._suppressOnSelect = true;
            control.removeItemFromSelection(this);
            control._suppressOnSelect = suppressSelect;
          }
          if (this.current)
            control.currentItem = null;
        ]]>
      </destructor>

      <!-- nsIDOMXULSelectControlItemElement -->
      <property name="label" readonly="true">
        <!-- Setter purposely not implemented; the getter returns a
             concatentation of label text to expose via accessibility APIs -->
        <getter>
          <![CDATA[
            const XULNS =
              "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
            return Array.map(this.getElementsByTagNameNS(XULNS, "label"),
                             label => label.value)
                        .join(" ");
          ]]>
        </getter>
      </property>

      <property name="searchLabel">
        <getter>
          <![CDATA[
            return this.hasAttribute("searchlabel") ?
                   this.getAttribute("searchlabel") : this.label;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            if (val !== null)
              this.setAttribute("searchlabel", val);
            else
              // fall back to the label property (default value)
              this.removeAttribute("searchlabel");
            return val;
          ]]>
        </setter>
      </property>

      <!-- nsIDOMXULSelectControlItemElement -->
      <property name="value" onget="return this.getAttribute('value');"
                             onset="this.setAttribute('value', val); return val;"/>

      <!-- nsIDOMXULSelectControlItemElement -->
      <property name="selected" onget="return this.getAttribute('selected') == 'true';">
        <setter><![CDATA[
          if (val)
            this.setAttribute("selected", "true");
          else
            this.removeAttribute("selected");

          return val;
        ]]></setter>
      </property>

      <!-- nsIDOMXULSelectControlItemElement -->
      <property name="control">
        <getter><![CDATA[
          var parent = this.parentNode;
          while (parent) {
            if (parent.localName == "richlistbox")
              return parent;
            parent = parent.parentNode;
          }
          return null;
        ]]></getter>
      </property>

      <property name="current" onget="return this.getAttribute('current') == 'true';">
        <setter><![CDATA[
          if (val)
            this.setAttribute("current", "true");
          else
            this.removeAttribute("current");
          return val;
        ]]></setter>
      </property>
    </implementation>

    <handlers>
      <!-- If there is no modifier key, we select on mousedown, not
           click, so that drags work correctly. -->
      <handler event="mousedown">
        <![CDATA[
          var control = this.control;
          if (!control || control.disabled)
            return;
          if ((!event.ctrlKey || (/Mac/.test(navigator.platform) && event.button == 2)) &&
              !event.shiftKey && !event.metaKey) {
            if (!this.selected) {
              control.selectItem(this);
            }
            control.currentItem = this;
          }
        ]]>
      </handler>

      <!-- On a click (up+down on the same item), deselect everything
           except this item. -->
      <handler event="click" button="0">
        <![CDATA[
          var control = this.control;
          if (!control || control.disabled)
            return;
          control._userSelecting = true;
          if (control.selType != "multiple") {
            control.selectItem(this);
          } else if (event.ctrlKey || event.metaKey) {
            control.toggleItemSelection(this);
            control.currentItem = this;
          } else if (event.shiftKey) {
            control.selectItemRange(null, this);
            control.currentItem = this;
          } else {
            /* We want to deselect all the selected items except what was
              clicked, UNLESS it was a right-click.  We have to do this
              in click rather than mousedown so that you can drag a
              selected group of items */

            // use selectItemRange instead of selectItem, because this
            // doesn't de- and reselect this item if it is selected
            control.selectItemRange(this, this);
          }
          control._userSelecting = false;
        ]]>
      </handler>
    </handlers>
  </binding>
</bindings>

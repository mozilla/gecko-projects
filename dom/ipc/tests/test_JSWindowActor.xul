<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
                 type="text/css"?>
<window title="Test JSWindowActor"
  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <script src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js"></script>

  <!-- test results are displayed in the html:body -->
  <body xmlns="http://www.w3.org/1999/xhtml">
  </body>

  <!-- test code goes here -->
  <script type="application/javascript"><![CDATA[
  const {Services} = ChromeUtils.import("resource://gre/modules/Services.jsm");
  const URL = "about:blank";
  let windowActorOptions = {
    allFrames: true,
    parent: {
      moduleURI: "resource://testing-common/TestParent.jsm",
    },
    child: {
      moduleURI: "resource://testing-common/TestChild.jsm",
      observers: [
        "test-js-window-actor-child-observer",
      ],
    },
  };

  add_task(async function registerWindowActor() {
    ok(ChromeUtils, "Should be able to get the ChromeUtils interface");
    ChromeUtils.registerWindowActor("Test", windowActorOptions);
    SimpleTest.doesThrow(() =>
      ChromeUtils.registerWindowActor("Test", windowActorOptions),
      "Should throw if register has duplicate name.");
    ChromeUtils.unregisterWindowActor("Test");
  });

  add_task(async function getActor() {
    // Test in-process getActor function
    ChromeUtils.registerWindowActor("Test", windowActorOptions);
    let parent = this.window.docShell.browsingContext.currentWindowGlobal;
    ok(parent, "WindowGlobalParent should have value.");
    let actorParent = parent.getActor("Test");
    is(actorParent.show(), "TestParent", "actor show should have vaule.");
    is(actorParent.manager, parent, "manager should match WindowGlobalParent.");

    let child = this.window.getWindowGlobalChild();
    ok(child, "WindowGlobalChild should have value.");
    is(child.isInProcess, true, "Actor should be in-process.");
    let actorChild = child.getActor("Test");

    is(actorChild.show(), "TestChild", "actor show should have vaule.");
    is(actorChild.manager, child, "manager should match WindowGlobalChild.");
    ok(parent.childActor===child, "Actor should be the same.");
    ok(parent.childActor.getActor("Test")===child.getActor("Test"), "GetActor should be the same.");
    ChromeUtils.unregisterWindowActor("Test");
  });

  add_task(async function asyncMessage() {
    // Test in-process send/recvAsyncMessage function
    ChromeUtils.registerWindowActor("Test", windowActorOptions);
    let child = this.window.getWindowGlobalChild();
    let actorChild = child.getActor("Test");
    let promise = new Promise(resolve => {
      actorChild.sendAsyncMessage("init", {});
      actorChild.done = (data) => resolve(data);
    }).then(data => {
      ok(data.initial, "Initial should be true.");
      ok(data.toParent, "ToParent should be true.");
      ok(data.toChild, "ToChild should be true.");
    });

    await promise;
    ChromeUtils.unregisterWindowActor("Test");
  });

  add_task(async function observers() {
    // Test in-process observers notification
    ChromeUtils.registerWindowActor("Test", windowActorOptions);
    const TOPIC = "test-js-window-actor-child-observer";
    Services.obs.notifyObservers(content.window, TOPIC, "dataString");

    let child = content.window.getWindowGlobalChild();
    let actorChild = child.getActor("Test");
    ok(actorChild, "JSWindowActorChild should have value.");
    let {subject, topic, data} = actorChild.lastObserved;

    is(subject.getWindowGlobalChild().getActor("Test"), actorChild, "Should have been recieved on the right actor");
    is(topic, TOPIC, "Topic matches");
    is(data, "dataString", "Data matches");
    ChromeUtils.unregisterWindowActor("Test");
  });

  ]]></script>
</window>

/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
/* vim: set ts=8 sts=2 et sw=2 tw=80: */
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

#ifndef MOZILLA_LAYERS_TEXTUREFORWARDER
#define MOZILLA_LAYERS_TEXTUREFORWARDER

#include <stdint.h>                     // for int32_t, uint64_t
#include "gfxTypes.h"
#include "mozilla/Attributes.h"         // for override
#include "mozilla/layers/ISurfaceAllocator.h"  // for ISurfaceAllocator
#include "mozilla/layers/LayersTypes.h"  // for LayersBackend
#include "mozilla/layers/TextureClient.h"  // for TextureClient
#include "nsRegion.h"                   // for nsIntRegion
#include "mozilla/gfx/Rect.h"
#include "nsExpirationTracker.h"

namespace mozilla {
namespace layers {


/**
 * See ActiveResourceTracker below.
 */
class ActiveResource
{
public:
 virtual void NotifyInactive() = 0;
  nsExpirationState* GetExpirationState() { return &mExpirationState; }
  bool IsActivityTracked() { return mExpirationState.IsTracked(); }
private:
  nsExpirationState mExpirationState;
};

/**
 * A convenience class on top of nsExpirationTracker
 */
class ActiveResourceTracker : public nsExpirationTracker<ActiveResource, 3>
{
public:
  ActiveResourceTracker(uint32_t aExpirationCycle, const char* aName)
  : nsExpirationTracker(aExpirationCycle, aName)
  {}

  virtual void NotifyExpired(ActiveResource* aResource) override
  {
    RemoveObject(aResource);
    aResource->NotifyInactive();
  }
};

/**
 * An abstract interface for classes that implement the autogenerated
 * IPDL actor class. Lets us check if they are still valid for IPC.
 */
class LayersIPCActor {
public:
  virtual bool IPCOpen() const { return true; }
};

/**
 * An abstract interface for LayersIPCActors that implement a top-level
 * IPDL protocol so also have their own channel.
 * Has their own MessageLoop for message dispatch, and can allocate
 * shmem.
 */
class LayersIPCChannel : public LayersIPCActor
                       , public ShmemAllocator {
public:
  NS_IMETHOD_(MozExternalRefCountType) AddRef(void) = 0;
  NS_IMETHOD_(MozExternalRefCountType) Release(void) = 0;

  virtual bool IsSameProcess() const = 0;

  virtual bool UsesImageBridge() const { return false; }

  virtual base::ProcessId GetParentPid() const = 0;

  virtual MessageLoop* GetMessageLoop() const = 0;

  virtual FixedSizeSmallShmemSectionAllocator* GetTileLockAllocator() { return nullptr; }

  virtual void CancelWaitForRecycle(uint64_t aTextureId) = 0;
protected:
  virtual ~LayersIPCChannel() {}
};

/**
 * An abstract interface for classes that can allocate PTexture objects
 * across IPDL. Currently a sub-class of LayersIPCChannel for simplicity
 * since all our implementations use both, but could be independant if needed.
 */
class TextureForwarder : public LayersIPCChannel {
public:
  /**
   * Create a TextureChild/Parent pair as as well as the TextureHost on the parent side.
   */
  virtual PTextureChild* CreateTexture(
    const SurfaceDescriptor& aSharedData,
    LayersBackend aLayersBackend,
    TextureFlags aFlags,
    uint64_t aSerial) = 0;
};

/**
 * An abstract interface for classes that are tied to a specific Compositor across
 * IPDL and uses TextureFactoryIdentifier to describe this Compositor.
 */
class KnowsCompositor {
public:
  NS_IMETHOD_(MozExternalRefCountType) AddRef(void) = 0;
  NS_IMETHOD_(MozExternalRefCountType) Release(void) = 0;

  KnowsCompositor()
    : mSerial(++sSerialCounter)
  {
    mActiveResourceTracker = MakeUnique<ActiveResourceTracker>(1000, "CompositableForwarder");
  }

  void IdentifyTextureHost(const TextureFactoryIdentifier& aIdentifier);

  SyncObject* GetSyncObject() { return mSyncObject; }

  int32_t GetMaxTextureSize() const
  {
    return mTextureFactoryIdentifier.mMaxTextureSize;
  }

  /**
   * Returns the type of backend that is used off the main thread.
   * We only don't allow changing the backend type at runtime so this value can
   * be queried once and will not change until Gecko is restarted.
   */
  LayersBackend GetCompositorBackendType() const
  {
    return mTextureFactoryIdentifier.mParentBackend;
  }

  bool SupportsTextureBlitting() const
  {
    return mTextureFactoryIdentifier.mSupportsTextureBlitting;
  }

  bool SupportsPartialUploads() const
  {
    return mTextureFactoryIdentifier.mSupportsPartialUploads;
  }

  const TextureFactoryIdentifier& GetTextureFactoryIdentifier() const
  {
    return mTextureFactoryIdentifier;
  }

  int32_t GetSerial() { return mSerial; }

  ActiveResourceTracker& GetActiveResourceTracker() { return *mActiveResourceTracker.get(); }

  /**
   * Helpers for finding other related interface. These are infallible.
   */
  virtual TextureForwarder* GetTextureForwarder() = 0;
  virtual LayersIPCActor* GetLayersIPCActor() = 0;

protected:
  TextureFactoryIdentifier mTextureFactoryIdentifier;

  RefPtr<SyncObject> mSyncObject;

  UniquePtr<ActiveResourceTracker> mActiveResourceTracker;

  const int32_t mSerial;
  static mozilla::Atomic<int32_t> sSerialCounter;
};

} // namespace layers
} // namespace mozilla

#endif

<?xml version="1.0"?>

<!-- This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->

<?xml-stylesheet href="chrome://global/skin" type="text/css"?>
<?xml-stylesheet href="chrome://mochikit/content/tests/SimpleTest/test.css"
                 type="text/css"?>
<?xml-stylesheet href="chrome://browser/content/places/places.css"?>
<?xml-stylesheet href="chrome://browser/skin/places/places.css"?>

<?xul-overlay href="chrome://browser/content/places/placesOverlay.xul"?>

<window xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
        title="Test RecentBookmarksMenuUI">
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SimpleTest.js" />
  <script type="application/javascript"
          src="chrome://mochikit/content/tests/SimpleTest/SpawnTask.js" />
  <script type="application/javascript" src="chrome://browser/content/browser.js"/>
  <script type="application/javascript"
          src="chrome://browser/content/browser-places.js" />
  <script type="application/javascript"
          src="resource://testing-common/sinon-2.3.2.js" />

  <body xmlns="http://www.w3.org/1999/xhtml" />

  <menu id="fakeMenu">
    <menuseparator id="fakePreviousSeparator"/>
    <menuitem id="fakeRecentBookmarks"/>
    <menuseparator id="fakeNextSeparator"/>
  </menu>

  <script type="application/javascript">
  <![CDATA[
    "use strict"

    const sandbox = sinon.sandbox.create();

    const BASE_URL = "http://example.org/browser/browser/components/places/tests/browser/";

    var bmMenu = document.getElementById("fakeMenu");
    var prevSep = document.getElementById("fakePreviousSeparator");
    var recentBmItem = document.getElementById("fakeRecentBookmarks");
    var nextSep = document.getElementById("fakeNextSeparator");

    function simulateHideMenu() {
      let event = new CustomEvent("popuphidden");
      bmMenu.dispatchEvent(event);
    }

    add_task(async function setup() {
      let children = [];
      // Make dateAdded start in the past and advance it on a second for each bookmark,
      // so that we can guarentee which ones get displayed in the test.
      let dateAdded = (new Date()).getTime() - 1000;

      for (let i = 0; i < 10; i++) {
        children.push({
          title: `bm${i}`,
          url: `${BASE_URL}bookmark_dummy_${i}.html`,
          dateAdded: new Date(dateAdded)
        });
        dateAdded += 100;
      }

      await PlacesUtils.bookmarks.insertTree({
        guid: PlacesUtils.bookmarks.unfiledGuid,
        children: [{
          children,
          title: "TestFolder",
          type: PlacesUtils.bookmarks.TYPE_FOLDER,
        }]
      });
    });

    add_task(async function test_basic_contents() {
      RecentBookmarksMenuUI.init(document.getElementById("fakeRecentBookmarks"));

      is(bmMenu.children.length, RecentBookmarksMenuUI.MAX_RESULTS + 3,
         "There should be MAX_RESULTS children plus the 2 separators and 1 menuitem.");

      let recentItem = recentBmItem.nextSibling;
      for (let i = 9; i >= 10 - RecentBookmarksMenuUI.MAX_RESULTS; --i) {
        is(recentItem.getAttribute("label"), `bm${i}`,
           "Should have the expected title from the bookmark");
        is(recentItem.getAttribute("targetURI"), `${BASE_URL}bookmark_dummy_${i}.html`,
           "Should have the expected targetURI from the bookmark");
        is(recentItem.getAttribute("simulated-places-node"), "true",
           "Should be flagged as a simulated-places-node");
        recentItem = recentItem.nextSibling;
      }

      is(prevSep.hidden, false, "Previous separator should not be hidden");
      is(recentBmItem.hidden, false, "The title item should not be hidden");
      ok(nextSep, "Next separator should still be present");
      is(nextSep.hidden, false, "Next separator should not be hidden");

      // Also check that hiding the menu stops listening to items.
      simulateHideMenu();

      ok(!RecentBookmarksMenuUI._recentlyBookmarkedObserver,
         "Remove observer should have been called");
    });

    add_task(async function test_remove_bookmark() {
      RecentBookmarksMenuUI.init(document.getElementById("fakeRecentBookmarks"));

      is(bmMenu.children.length, RecentBookmarksMenuUI.MAX_RESULTS + 3,
         "There should be MAX_RESULTS children plus the 2 separators and 1 menuitem.");

      let bmToRemove = await PlacesUtils.bookmarks.fetch({url: `${BASE_URL}bookmark_dummy_9.html`});

      const clock = sandbox.useFakeTimers();

      await PlacesUtils.bookmarks.remove(bmToRemove);

      // Move the clock past the timeout to ensure any update happen.
      clock.tick(RecentBookmarksMenuUI.ITEM_REMOVED_TIMEOUT + 1);
      clock.restore();

      let recentItem = recentBmItem.nextSibling;
      for (let i = 8; i >= 9 - RecentBookmarksMenuUI.MAX_RESULTS; --i) {
        is(recentItem.getAttribute("label"), `bm${i}`,
           "Should have the expected title from the bookmark");
        is(recentItem.getAttribute("targetURI"), `${BASE_URL}bookmark_dummy_${i}.html`,
           "Should have the expected targetURI from the bookmark");
        is(recentItem.getAttribute("simulated-places-node"), "true",
           "Should be flagged as a simulated-places-node");
        recentItem = recentItem.nextSibling;
      }

      simulateHideMenu();
    });

    add_task(async function test_remove_multiple_bookmarks() {
      RecentBookmarksMenuUI.init(document.getElementById("fakeRecentBookmarks"));

      is(bmMenu.children.length, RecentBookmarksMenuUI.MAX_RESULTS + 3,
         "There should be MAX_RESULTS children plus the 2 separators and 1 menuitem.");

      let bmToRemove = await PlacesUtils.bookmarks.fetch({url: `${BASE_URL}bookmark_dummy_8.html`});

      const clock = sandbox.useFakeTimers();

      sinon.stub(RecentBookmarksMenuUI, "_insertRecentMenuItems");

      await PlacesUtils.bookmarks.remove(bmToRemove);

      // Move the clock a little way and check we haven't re-pouplated.
      clock.tick(RecentBookmarksMenuUI.ITEM_REMOVED_TIMEOUT - 10);

      ok(RecentBookmarksMenuUI._insertRecentMenuItems.notCalled,
         "should not have populated the recent bookmarks striaght away.")

      bmToRemove = await PlacesUtils.bookmarks.fetch({url: `${BASE_URL}bookmark_dummy_7.html`});
      await PlacesUtils.bookmarks.remove(bmToRemove);

      // Move the clock a little way and check we haven't re-pouplated.
      clock.tick(RecentBookmarksMenuUI.ITEM_REMOVED_TIMEOUT - 10);

      ok(RecentBookmarksMenuUI._insertRecentMenuItems.notCalled,
         "should not have populated the recent bookmarks striaght away.")

      RecentBookmarksMenuUI._insertRecentMenuItems.restore();

      // Move the clock past the timeout and check the menu is updated.
      clock.tick(20);

      let recentItem = recentBmItem.nextSibling;
      for (let i = 6; i >= 7 - RecentBookmarksMenuUI.MAX_RESULTS; --i) {
        is(recentItem.getAttribute("label"), `bm${i}`,
           "Should have the expected title from the bookmark");
        is(recentItem.getAttribute("targetURI"), `${BASE_URL}bookmark_dummy_${i}.html`,
           "Should have the expected targetURI from the bookmark");
        is(recentItem.getAttribute("simulated-places-node"), "true",
           "Should be flagged as a simulated-places-node");
        recentItem = recentItem.nextSibling;
      }

      clock.restore();

      simulateHideMenu();
    });

    add_task(async function test_remove_non_shown_bookmark() {
      RecentBookmarksMenuUI.init(document.getElementById("fakeRecentBookmarks"));

      is(bmMenu.children.length, RecentBookmarksMenuUI.MAX_RESULTS + 3,
         "There should be MAX_RESULTS children plus the 2 separators and 1 menuitem.");

      let bmToRemove = await PlacesUtils.bookmarks.fetch({url: `${BASE_URL}bookmark_dummy_1.html`});

      sandbox.stub(RecentBookmarksMenuUI, "_clearExistingItems");
      sandbox.stub(RecentBookmarksMenuUI, "_insertRecentMenuItems");

      const clock = sandbox.useFakeTimers();

      await PlacesUtils.bookmarks.remove(bmToRemove);

      // Move the clock past the timeout to ensure any update happen.
      clock.tick(RecentBookmarksMenuUI.ITEM_REMOVED_TIMEOUT + 1);
      clock.restore();

      is(RecentBookmarksMenuUI._clearExistingItems.notCalled, true,
         "Should not have cleared the existing items when a bookmark is removed that is not displayed.");
      is(RecentBookmarksMenuUI._insertRecentMenuItems.notCalled, true,
         "Should not have inserted new menu items when a bookmark is removed that is not displayed.");

      sandbox.restore();
      simulateHideMenu();
    });

    add_task(async function test_hide_recently_bookmarked() {
      RecentBookmarksMenuUI.init(document.getElementById("fakeRecentBookmarks"));

      is(bmMenu.children.length, RecentBookmarksMenuUI.MAX_RESULTS + 3,
         "There should be MAX_RESULTS children plus the 2 separators and 1 menuitem.");

      RecentBookmarksMenuUI.visible = false;

      is(Services.prefs.getBoolPref(RecentBookmarksMenuUI.RECENTLY_BOOKMARKED_PREF), false,
         "showRecentlyBookmarked pref should have been set to false");

      is(bmMenu.children.length, 3,
         "There should only be the original 3 items in the menu");
      is(document.getElementById("fakePreviousSeparator").hidden, true,
         "The previous separator should be hidden");
      is(document.getElementById("fakeRecentBookmarks").hidden, true,
         "The title item should be hidden");
      is(document.getElementById("fakeNextSeparator").hidden, false,
         "Next separator should not be hidden");

      simulateHideMenu();
    });

    add_task(async function test_show_recently_bookmarked() {
      RecentBookmarksMenuUI.init(document.getElementById("fakeRecentBookmarks"));

      is(bmMenu.children.length, 3,
         "There should only be the original 3 items in the menu");

      RecentBookmarksMenuUI.visible = true;

      is(bmMenu.children.length, RecentBookmarksMenuUI.MAX_RESULTS + 3,
         "There should be MAX_RESULTS children plus the 2 separators and 1 menuitem.");

      is(Services.prefs.getBoolPref(RecentBookmarksMenuUI.RECENTLY_BOOKMARKED_PREF), true,
         "showRecentlyBookmarked pref should have been set to true");

      is(document.getElementById("fakePreviousSeparator").hidden, false,
         "The previous separator should not be hidden");
      is(document.getElementById("fakeRecentBookmarks").hidden, false,
         "The title item should not be hidden");
      is(document.getElementById("fakeNextSeparator").hidden, false,
         "Next separator should not be hidden");

      simulateHideMenu();
    });

    add_task(async function cleanup() {
      Services.prefs.clearUserPref(RecentBookmarksMenuUI.RECENTLY_BOOKMARKED_PREF);
      await PlacesUtils.bookmarks.eraseEverything();
    });
  ]]>
  </script>
</window>
